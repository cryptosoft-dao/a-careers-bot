/* eslint-disable @typescript-eslint/explicit-module-boundary-types */


import { FEE_TON } from '../consts'

const TEXT_START = `<b>DeLab bot</b> - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –±–æ—Ç –∫–æ—à–µ–ª–µ–∫\n\n
–•—Ä–∞–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–π –∏ –ø–æ–ª—É—á–∞–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–¥–µ—Å—å. –ö–æ—à–µ–ª—ë–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Telegram!`
const TEXT_WALLET_1 = 'üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>'

const TEXT_PAY_1 = 'üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ <b>TON</b>:\n\n<code>'

const TEXT_POPOL = 'üíµ <b>–í—ã –≤–Ω–µ—Å–ª–∏</b> –Ω–∞ —Å—á—ë—Ç <b>'

const TEXT_WIS = 'üì• <b>–í—ã–≤–æ–¥</b>\n'
const TEXT_WIS_1 = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤—ã–≤–æ–¥–∞:</b>'

const TEXT_WIS_ERR = '\n\nüî∫ <b>–£ –í–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.</b>'

const TEXT_WIS_SUSS = '\n\n <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞</b>'

export interface UserType {
    id: number,
    username: string,
    id_telegram: number,
    balance: {
        ton: string | bigint,
        aboba: string | bigint
    },
    address: string
}

export class Text {
    private user: UserType

    constructor (user: UserType) {
        this.user = user
    }

    public fetch (user: UserType): void {
        this.user = user
    }

    public static nanoToFloat (num: string | bigint): string {
        let res = (Number(num) / 10 ** 9).toFixed(6)
        if (res[res.length - 1] === '0') {
            res = (Number(num) / 10 ** 9).toFixed(5)
        }
        if (res[res.length - 1] === '0') {
            res = (Number(num) / 10 ** 9).toFixed(4)
        }
        if (res[res.length - 1] === '0') {
            res = (Number(num) / 10 ** 9).toFixed(3)
        }
        if (res[res.length - 1] === '0') {
            res = (Number(num) / 10 ** 9).toFixed(2)
        }
        if (res[res.length - 1] === '0') {
            res = (Number(num) / 10 ** 9).toFixed(1)
        }
        if (res[res.length - 1] === '0') {
            res = (Number(num) / 10 ** 9).toFixed(0)
        }
        return res
    }

    public static getStart (): string {
        return TEXT_START
    }

    public getWallet (): string {
        const text = `${TEXT_WALLET_1}\n<i>
TON: <code>${Text.nanoToFloat(this.user.balance.ton)}</code>\n
ABOB: <code>${this.user.balance.aboba}</code></i>`
        return text
    }

    public getPay (): string {
        return TEXT_PAY_1 + this.user.address + '</code>'
    }

    public static getPopol (amount: string, name_coin: string): string {
        return TEXT_POPOL + amount + ' ' + name_coin.toUpperCase() + '</b>.'
    }

    public getWis (): string {
        const text = `${TEXT_WIS}<i>
TON: <code>${Text.nanoToFloat(this.user.balance.ton)}</code>
ABOB: <code>${this.user.balance.aboba}</code></i>\n\n${TEXT_WIS_1}`
        return text
    }

    public getWisTon (balance: any): string {
        const err = BigInt(balance.ton) < 0 ? TEXT_WIS_ERR : TEXT_WIS_SUSS
        const text = `${TEXT_WIS}
–ë–∞–ª–∞–Ω—Å: <code>${Text.nanoToFloat(this.user.balance.ton)} TON</code>

–ú–∏–Ω–∏–º—É–º: <code>0.000000001 TON</code>
–ö–æ–º–∏—Å—Å–∏—è: <code>0.05 TON</code>${err}`
        return text
    }

    public static getWisAddress (coin: string): string {
        const text = `–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ${coin.toUpperCase()}.`
        return text
    }

    public static getConfirmAmountTon (amount: string, address: string): string {
        const text = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>

<b>–ê–¥—Ä–µ—Å:</b><code>${address}</code>
<b>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ:</b><code>${Text.nanoToFloat(BigInt(amount))}</code>
<b>–ö–æ–º–∏—Å—Å–∏—è:</b><code>0.05</code>

<b>–û–±—â–∞—è —Å—É–º–º–∞:</b><code>${Text.nanoToFloat(BigInt(amount) + FEE_TON)}</code>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –º–æ–Ω–µ—Ç—ã?
`
        return text
    }

    public static addWis (): string {
        const text = '<b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.</b>'
        return text
    }

    public static wisSend (amount: string, coin: string): string {
        const text = `üì• <b>–í—ã–≤–æ–¥ <code>${Text.nanoToFloat(amount)} ${coin.toUpperCase()}</code> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>`
        return text
    }
}
